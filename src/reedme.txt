网络编程：
    主要用于计算机与计算机（终端）之间的数据传输问题

网络编程：不需要基于html页面就可以达到数据之间的传输

网页编程：基于html页面，进行数据交互


web：

android

计算机网络：分布在不同地域的计算机通过外部设备连接起来达到了消息互通，资源共享的效果就称作为一个计算机网络


网络通信三要素：
    1.IP
    2.端口号
    3.协议

IP地址：IP地址的本质就是由一个32位的二进制数据组成。后来为了记忆方便切成了4份，每份8bit  表示0~255
        IP地址=网络号+主机号

        IP地址的分类：
            A类地址=一个网络号+三个主机号   2^24      政府单位
            B类地址=两个网络号+两个主机号    2^16    事业单位
            C类地址=三个网络号+一个主机号    2^8     私人使用

InetAddress(IP类)
    getLocalHost()
    getHostAddress()    返回一个IP地址的字符串表示形式。
    getHostName()       返回计算机的主机名
    getByName()         根据一个IP地址的字符串形式或者是一个主机名生成一个IP地址对象。

端口号没有类描述
    端口号范围 0~65535
    从0~1023   系统紧密绑定与一些服务
    1024~65535  可以使用

在java中网络通讯也被称作为Socket(套接字)通讯，要求通讯的两台机器都必须安装Socket。

    不同的协议有不同的Socket

网络的通讯协议：
    udp通信协议：
        UDP同放心协议特点：
            1.将数据及其源和目的封装为数据包，面向无连接。
            2.每个数据包大小限制在64K。
            3.无需连接，不可靠。
            4.无需连接速度快。
            5.UDP通信不分服务端与客户端，只分发送端与接收端。

        UDP协议下的Socket()
            DatagramSocket()    UDP Socket服务
            DatagramPackage()   数据包类

        发送端的使用步骤：
            1.建立UDP服务。
            2.准备数据，把数据封装到数据包中。发送端的数据包要带上IP地址与端口
            3.调用UDP服务，发送数据
            4.关闭资源

        接收端的使用步骤：
            1.建立UDP服务。
            2.准备空的数据包，接收数据。
            3.调用UDP的服务接收数据。
            4.关闭资源。

        注意：
            1.receive()方法是一个阻塞性方法，没收到数据包前，会一直等待。
            2.每个网络程序都有自己所处理的特定格式数据，如果接收到的数据不符合指定的格式，那么就会被当成垃圾数据丢弃。
            3.在UDP协议中有一个IP地址被称作为广播地址，广播地址就是主机号被称为255的地址。
                给广播地址发送信息的时候，在同一个网络段的终端都可以收到信息

        UDP是一个不可靠（数据包会丢失）的协议
        什么情况会丢包：
            1.带宽不足
            2.CPU处理能力不足

    tcp通信协议：
        1.TCP是基于IO流传输的，面向连接
        2.TCP数据传输没有大小限制
        3.TCP是面向连接的，通过三次握手协议保证数据的完整性，是可靠的协议
        4.TCP面向连接，速度慢。
        5.TCP区分客户端与服务端

    TCP下的Socket
        Socket(客户端)
            TCP客户端使用步骤：
                1.建立TCP客户端服务。
                2.获取到对应的流对象
                3.
        ServerSocket(服务端)
            TCP服务端使用步骤：
                1.开启TCP服务端
                2.接收客户端的连接，产生一个Socket
                3.获取对应的流对象读取或者写出数据
                4.关闭资源